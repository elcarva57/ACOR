// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 06/02/2012 12:01:06 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\User\Ema\ema.exe (1)
// LIBID: {63E9DAE2-1FC2-41B0-80E7-98F3C9662865}
// LCID: 0
// Helpfile: 
// HelpString: ema Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   ema_TLBH
#define   ema_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Ema_tlb
{

// *********************************************************************//
// HelpString: ema Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ema;
extern __declspec (package) const GUID IID_IWeather;
extern __declspec (package) const GUID CLSID_Weather;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{99A96C02-B41E-4DA1-9B5A-C2E2C9C0928A}") IWeather;
typedef TComInterface<IWeather, &IID_IWeather> IWeatherPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IWeather Weather;
typedef IWeatherPtr WeatherPtr;

#define LIBID_OF_Weather (&LIBID_ema)
// *********************************************************************//
// Interface: IWeather
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {99A96C02-B41E-4DA1-9B5A-C2E2C9C0928A}
// *********************************************************************//
interface IWeather  : public IDispatch
{
public:
  // [1] The ambient (outside) air temperature (deg.C) 
  virtual HRESULT STDMETHODCALLTYPE get_AmbientTemperature(float* Value/*[out,retval]*/) = 0;
  // [2] True if the weather is safe for observing
  virtual HRESULT STDMETHODCALLTYPE get_Safe(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [3] Cloud coverage (fractional 0-1)
  virtual HRESULT STDMETHODCALLTYPE get_Clouds(float* Value/*[out,retval]*/) = 0;
  // [4] Sky Quality in visual magnitud
  virtual HRESULT STDMETHODCALLTYPE get_SkyQuality(long* Value/*[out,retval]*/) = 0;
  // [8] True if precipitation is present
  virtual HRESULT STDMETHODCALLTYPE get_Precipitation(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [9] The display name of the weather system
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0;
  // [10] Serial string received from the station EMA.
  virtual HRESULT STDMETHODCALLTYPE get_MensajeEma(BSTR* Value/*[out,retval]*/) = 0;
  // [11] The barometric pressure (millibars) 
  virtual HRESULT STDMETHODCALLTYPE get_BarometricPressure(float* Value/*[out,retval]*/) = 0;
  // [12] The dew point temperature (deg C) 
  virtual HRESULT STDMETHODCALLTYPE get_DewPoint(long* Value/*[out,retval]*/) = 0;
  // [13] The relative humidity (fractional 0-1) 
  virtual HRESULT STDMETHODCALLTYPE get_RelativeHumidity(long* Value/*[out,retval]*/) = 0;
  // [14] The wind direction 
  virtual HRESULT STDMETHODCALLTYPE get_WindDirection(long* Value/*[out,retval]*/) = 0;
  // [15] The wind velocity (knots)
  virtual HRESULT STDMETHODCALLTYPE get_WindVelocity(long* Value/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_Connected(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_Connected(VARIANT_BOOL Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE OpenShutter(void) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE CloseShutter(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_ShutterStatus(long* Value/*[out,retval]*/) = 0; // [18]
  // [5] Sky brignets, visual magnitude
  virtual HRESULT STDMETHODCALLTYPE get_SkyMagnitude(float* Value/*[out,retval]*/) = 0;
  // [17] Display the weather server setup window
  virtual HRESULT STDMETHODCALLTYPE SetupDialog(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE set_MensajeCor(BSTR Param1/*[in]*/) = 0; // [19]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  float __fastcall get_AmbientTemperature(void)
  {
    float Value;
    OLECHECK(this->get_AmbientTemperature((float*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Safe(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Safe((VARIANT_BOOL*)&Value));
    return Value;
  }

  float __fastcall get_Clouds(void)
  {
    float Value;
    OLECHECK(this->get_Clouds((float*)&Value));
    return Value;
  }

  long __fastcall get_SkyQuality(void)
  {
    long Value;
    OLECHECK(this->get_SkyQuality((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Precipitation(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Precipitation((VARIANT_BOOL*)&Value));
    return Value;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_MensajeEma(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_MensajeEma((BSTR*)&Value));
    return Value;
  }

  float __fastcall get_BarometricPressure(void)
  {
    float Value;
    OLECHECK(this->get_BarometricPressure((float*)&Value));
    return Value;
  }

  long __fastcall get_DewPoint(void)
  {
    long Value;
    OLECHECK(this->get_DewPoint((long*)&Value));
    return Value;
  }

  long __fastcall get_RelativeHumidity(void)
  {
    long Value;
    OLECHECK(this->get_RelativeHumidity((long*)&Value));
    return Value;
  }

  long __fastcall get_WindDirection(void)
  {
    long Value;
    OLECHECK(this->get_WindDirection((long*)&Value));
    return Value;
  }

  long __fastcall get_WindVelocity(void)
  {
    long Value;
    OLECHECK(this->get_WindVelocity((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Connected(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Connected((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_ShutterStatus(void)
  {
    long Value;
    OLECHECK(this->get_ShutterStatus((long*)&Value));
    return Value;
  }

  float __fastcall get_SkyMagnitude(void)
  {
    float Value;
    OLECHECK(this->get_SkyMagnitude((float*)&Value));
    return Value;
  }


  __property   float           AmbientTemperature = {read = get_AmbientTemperature};
  __property   VARIANT_BOOL    Safe = {read = get_Safe};
  __property   float           Clouds = {read = get_Clouds};
  __property   long            SkyQuality = {read = get_SkyQuality};
  __property   VARIANT_BOOL    Precipitation = {read = get_Precipitation};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            MensajeEma = {read = get_MensajeEma};
  __property   float           BarometricPressure = {read = get_BarometricPressure};
  __property   long            DewPoint = {read = get_DewPoint};
  __property   long            RelativeHumidity = {read = get_RelativeHumidity};
  __property   long            WindDirection = {read = get_WindDirection};
  __property   long            WindVelocity = {read = get_WindVelocity};
  __property   VARIANT_BOOL    Connected = {read = get_Connected, write = set_Connected};
  __property   long            ShutterStatus = {read = get_ShutterStatus};
  __property   float           SkyMagnitude = {read = get_SkyMagnitude};
  __property   BSTR            MensajeCor = {write = set_MensajeCor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIWeather
// Interface: IWeather
// *********************************************************************//
template <class T /* IWeather */ >
class TCOMIWeatherT : public TComInterface<IWeather>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWeatherT() {}
  TCOMIWeatherT(IWeather *intf, bool addRef = false) : TComInterface<IWeather>(intf, addRef) {}
  TCOMIWeatherT(const TCOMIWeatherT& src) : TComInterface<IWeather>(src) {}
  TCOMIWeatherT& operator=(const TCOMIWeatherT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AmbientTemperature(float* Value/*[out,retval]*/);
  float           __fastcall get_AmbientTemperature(void);
  HRESULT         __fastcall get_Safe(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Safe(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Safe(void);
  HRESULT         __fastcall get_Clouds(float* Value/*[out,retval]*/);
  float           __fastcall get_Clouds(void);
  HRESULT         __fastcall get_SkyQuality(long* Value/*[out,retval]*/);
  long            __fastcall get_SkyQuality(void);
  HRESULT         __fastcall get_Precipitation(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Precipitation(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Precipitation(void);
  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_MensajeEma(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MensajeEma(void);
  HRESULT         __fastcall get_BarometricPressure(float* Value/*[out,retval]*/);
  float           __fastcall get_BarometricPressure(void);
  HRESULT         __fastcall get_DewPoint(long* Value/*[out,retval]*/);
  long            __fastcall get_DewPoint(void);
  HRESULT         __fastcall get_RelativeHumidity(long* Value/*[out,retval]*/);
  long            __fastcall get_RelativeHumidity(void);
  HRESULT         __fastcall get_WindDirection(long* Value/*[out,retval]*/);
  long            __fastcall get_WindDirection(void);
  HRESULT         __fastcall get_WindVelocity(long* Value/*[out,retval]*/);
  long            __fastcall get_WindVelocity(void);
  HRESULT         __fastcall get_Connected(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Connected(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Connected(void);
  HRESULT         __fastcall set_Connected(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Connected(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall OpenShutter(void);
  HRESULT         __fastcall CloseShutter(void);
  HRESULT         __fastcall get_ShutterStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_ShutterStatus(void);
  HRESULT         __fastcall get_SkyMagnitude(float* Value/*[out,retval]*/);
  float           __fastcall get_SkyMagnitude(void);
  HRESULT         __fastcall SetupDialog(void);
  HRESULT         __fastcall set_MensajeCor(BSTR Param1/*[in]*/);

  __property   float           AmbientTemperature = {read = get_AmbientTemperature};
  __property   TOLEBOOL        Safe = {read = get_Safe};
  __property   float           Clouds = {read = get_Clouds};
  __property   long            SkyQuality = {read = get_SkyQuality};
  __property   TOLEBOOL        Precipitation = {read = get_Precipitation};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            MensajeEma = {read = get_MensajeEma};
  __property   float           BarometricPressure = {read = get_BarometricPressure};
  __property   long            DewPoint = {read = get_DewPoint};
  __property   long            RelativeHumidity = {read = get_RelativeHumidity};
  __property   long            WindDirection = {read = get_WindDirection};
  __property   long            WindVelocity = {read = get_WindVelocity};
  __property   TOLEBOOL        Connected = {read = get_Connected, write = set_Connected};
  __property   long            ShutterStatus = {read = get_ShutterStatus};
  __property   float           SkyMagnitude = {read = get_SkyMagnitude};
  __property   BSTR            MensajeCor = {write = set_MensajeCor};
};
typedef TCOMIWeatherT<IWeather> TCOMIWeather;

// *********************************************************************//
// DispIntf:  IWeather
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {99A96C02-B41E-4DA1-9B5A-C2E2C9C0928A}
// *********************************************************************//
template<class T>
class IWeatherDispT : public TAutoDriver<IWeather>
{
public:
  IWeatherDispT(){}

  IWeatherDispT(IWeather *pintf)
  {
    TAutoDriver<IWeather>::Bind(pintf, false);
  }

  IWeatherDispT(IWeatherPtr pintf)
  {
    TAutoDriver<IWeather>::Bind(pintf, true);
  }

  IWeatherDispT& operator=(IWeather *pintf)
  {
    TAutoDriver<IWeather>::Bind(pintf, false);
    return *this;
  }

  IWeatherDispT& operator=(IWeatherPtr pintf)
  {
    TAutoDriver<IWeather>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Weather));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Weather);
  }

  HRESULT         __fastcall get_AmbientTemperature(float* Value/*[out,retval]*/);
  float           __fastcall get_AmbientTemperature(void);
  HRESULT         __fastcall get_Safe(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Safe(void);
  HRESULT         __fastcall get_Clouds(float* Value/*[out,retval]*/);
  float           __fastcall get_Clouds(void);
  HRESULT         __fastcall get_SkyQuality(long* Value/*[out,retval]*/);
  long            __fastcall get_SkyQuality(void);
  HRESULT         __fastcall get_Precipitation(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Precipitation(void);
  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_MensajeEma(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MensajeEma(void);
  HRESULT         __fastcall get_BarometricPressure(float* Value/*[out,retval]*/);
  float           __fastcall get_BarometricPressure(void);
  HRESULT         __fastcall get_DewPoint(long* Value/*[out,retval]*/);
  long            __fastcall get_DewPoint(void);
  HRESULT         __fastcall get_RelativeHumidity(long* Value/*[out,retval]*/);
  long            __fastcall get_RelativeHumidity(void);
  HRESULT         __fastcall get_WindDirection(long* Value/*[out,retval]*/);
  long            __fastcall get_WindDirection(void);
  HRESULT         __fastcall get_WindVelocity(long* Value/*[out,retval]*/);
  long            __fastcall get_WindVelocity(void);
  HRESULT         __fastcall get_Connected(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Connected(void);
  HRESULT         __fastcall set_Connected(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall OpenShutter();
  HRESULT         __fastcall CloseShutter();
  HRESULT         __fastcall get_ShutterStatus(long* Value/*[out,retval]*/);
  long            __fastcall get_ShutterStatus(void);
  HRESULT         __fastcall get_SkyMagnitude(float* Value/*[out,retval]*/);
  float           __fastcall get_SkyMagnitude(void);
  HRESULT         __fastcall SetupDialog();
  HRESULT         __fastcall set_MensajeCor(BSTR Param1/*[in]*/);

  __property   float           AmbientTemperature = {read = get_AmbientTemperature};
  __property   VARIANT_BOOL    Safe = {read = get_Safe};
  __property   float           Clouds = {read = get_Clouds};
  __property   long            SkyQuality = {read = get_SkyQuality};
  __property   VARIANT_BOOL    Precipitation = {read = get_Precipitation};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            MensajeEma = {read = get_MensajeEma};
  __property   float           BarometricPressure = {read = get_BarometricPressure};
  __property   long            DewPoint = {read = get_DewPoint};
  __property   long            RelativeHumidity = {read = get_RelativeHumidity};
  __property   long            WindDirection = {read = get_WindDirection};
  __property   long            WindVelocity = {read = get_WindVelocity};
  __property   VARIANT_BOOL    Connected = {read = get_Connected, write = set_Connected};
  __property   long            ShutterStatus = {read = get_ShutterStatus};
  __property   float           SkyMagnitude = {read = get_SkyMagnitude};
  __property   BSTR            MensajeCor = {write = set_MensajeCor};
};
typedef IWeatherDispT<IWeather> IWeatherDisp;

// *********************************************************************//
// SmartIntf: TCOMIWeather
// Interface: IWeather
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_AmbientTemperature(float* Value/*[out,retval]*/)
{
  return (*this)->get_AmbientTemperature(Value);
}

template <class T> float __fastcall
TCOMIWeatherT<T>::get_AmbientTemperature(void)
{
  float Value;
  OLECHECK(this->get_AmbientTemperature((float*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Safe(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Safe(Value);
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Safe(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Safe(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIWeatherT<T>::get_Safe(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Safe((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Clouds(float* Value/*[out,retval]*/)
{
  return (*this)->get_Clouds(Value);
}

template <class T> float __fastcall
TCOMIWeatherT<T>::get_Clouds(void)
{
  float Value;
  OLECHECK(this->get_Clouds((float*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_SkyQuality(long* Value/*[out,retval]*/)
{
  return (*this)->get_SkyQuality(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_SkyQuality(void)
{
  long Value;
  OLECHECK(this->get_SkyQuality((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Precipitation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Precipitation(Value);
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Precipitation(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Precipitation(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIWeatherT<T>::get_Precipitation(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Precipitation((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIWeatherT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_MensajeEma(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_MensajeEma(Value);
}

template <class T> BSTR __fastcall
TCOMIWeatherT<T>::get_MensajeEma(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_MensajeEma((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_BarometricPressure(float* Value/*[out,retval]*/)
{
  return (*this)->get_BarometricPressure(Value);
}

template <class T> float __fastcall
TCOMIWeatherT<T>::get_BarometricPressure(void)
{
  float Value;
  OLECHECK(this->get_BarometricPressure((float*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_DewPoint(long* Value/*[out,retval]*/)
{
  return (*this)->get_DewPoint(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_DewPoint(void)
{
  long Value;
  OLECHECK(this->get_DewPoint((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_RelativeHumidity(long* Value/*[out,retval]*/)
{
  return (*this)->get_RelativeHumidity(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_RelativeHumidity(void)
{
  long Value;
  OLECHECK(this->get_RelativeHumidity((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_WindDirection(long* Value/*[out,retval]*/)
{
  return (*this)->get_WindDirection(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_WindDirection(void)
{
  long Value;
  OLECHECK(this->get_WindDirection((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_WindVelocity(long* Value/*[out,retval]*/)
{
  return (*this)->get_WindVelocity(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_WindVelocity(void)
{
  long Value;
  OLECHECK(this->get_WindVelocity((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Connected(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Connected(Value);
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_Connected(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Connected(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIWeatherT<T>::get_Connected(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Connected((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::set_Connected(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Connected(Value);
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::set_Connected(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Connected(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::OpenShutter(void)
{
  return (*this)->OpenShutter();
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::CloseShutter(void)
{
  return (*this)->CloseShutter();
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_ShutterStatus(long* Value/*[out,retval]*/)
{
  return (*this)->get_ShutterStatus(Value);
}

template <class T> long __fastcall
TCOMIWeatherT<T>::get_ShutterStatus(void)
{
  long Value;
  OLECHECK(this->get_ShutterStatus((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::get_SkyMagnitude(float* Value/*[out,retval]*/)
{
  return (*this)->get_SkyMagnitude(Value);
}

template <class T> float __fastcall
TCOMIWeatherT<T>::get_SkyMagnitude(void)
{
  float Value;
  OLECHECK(this->get_SkyMagnitude((float*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::SetupDialog(void)
{
  return (*this)->SetupDialog();
}

template <class T> HRESULT __fastcall
TCOMIWeatherT<T>::set_MensajeCor(BSTR Param1/*[in]*/)
{
  return (*this)->set_MensajeCor(Param1);
}

// *********************************************************************//
// DispIntf:  IWeather
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {99A96C02-B41E-4DA1-9B5A-C2E2C9C0928A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_AmbientTemperature(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AmbientTemperature"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWeatherDispT<T>::get_AmbientTemperature(void)
{
  float Value;
  this->get_AmbientTemperature((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_Safe(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Safe"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWeatherDispT<T>::get_Safe(void)
{
  VARIANT_BOOL Value;
  this->get_Safe((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_Clouds(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clouds"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWeatherDispT<T>::get_Clouds(void)
{
  float Value;
  this->get_Clouds((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_SkyQuality(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SkyQuality"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_SkyQuality(void)
{
  long Value;
  this->get_SkyQuality((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_Precipitation(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precipitation"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWeatherDispT<T>::get_Precipitation(void)
{
  VARIANT_BOOL Value;
  this->get_Precipitation((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWeatherDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_MensajeEma(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MensajeEma"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWeatherDispT<T>::get_MensajeEma(void)
{
  BSTR Value;
  this->get_MensajeEma((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_BarometricPressure(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BarometricPressure"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWeatherDispT<T>::get_BarometricPressure(void)
{
  float Value;
  this->get_BarometricPressure((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_DewPoint(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DewPoint"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_DewPoint(void)
{
  long Value;
  this->get_DewPoint((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_RelativeHumidity(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeHumidity"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_RelativeHumidity(void)
{
  long Value;
  this->get_RelativeHumidity((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_WindDirection(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindDirection"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_WindDirection(void)
{
  long Value;
  this->get_WindDirection((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_WindVelocity(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindVelocity"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_WindVelocity(void)
{
  long Value;
  this->get_WindVelocity((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_Connected(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWeatherDispT<T>::get_Connected(void)
{
  VARIANT_BOOL Value;
  this->get_Connected((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::set_Connected(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::OpenShutter()
{
  _TDispID _dispid(*this, OLETEXT("OpenShutter"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::CloseShutter()
{
  _TDispID _dispid(*this, OLETEXT("CloseShutter"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_ShutterStatus(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShutterStatus"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWeatherDispT<T>::get_ShutterStatus(void)
{
  long Value;
  this->get_ShutterStatus((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::get_SkyMagnitude(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SkyMagnitude"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IWeatherDispT<T>::get_SkyMagnitude(void)
{
  float Value;
  this->get_SkyMagnitude((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::SetupDialog()
{
  _TDispID _dispid(*this, OLETEXT("SetupDialog"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IWeatherDispT<T>::set_MensajeCor(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MensajeCor"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Weather
// Interface: TCOMIWeather
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWeather, IWeather, &CLSID_Weather, &IID_IWeather> CoWeather;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Ema_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ema_tlb;
#endif

#pragma option pop

#endif // ema_TLBH
