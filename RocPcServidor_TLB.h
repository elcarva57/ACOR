// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 01/10/2015 14:47:35 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\Cpp\RocPcServidorAsp\RocPcServidor.tlb (1)
// LIBID: {88B924B2-99C6-4B1B-B13A-EF64509CDE41}
// LCID: 0
// Helpfile: 
// HelpString: RocPcServidor Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   RocPcServidor_TLBH
#define   RocPcServidor_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Rocpcservidor_tlb
{

// *********************************************************************//
// HelpString: RocPcServidor Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_RocPcServidor = {0x88B924B2, 0x99C6, 0x4B1B,{ 0xB1, 0x3A, 0xEF,0x64, 0x50, 0x9C,0xDE, 0x41} };
extern "C" const __declspec(selectany) GUID IID_IcRocPcServidor = {0xA5A73D7E, 0x9916, 0x4F9F,{ 0xAF, 0x63, 0xC2,0x74, 0x8F, 0x9B,0x7C, 0xD5} };
extern "C" const __declspec(selectany) GUID CLSID_cRocPcServidor = {0xABD30286, 0xD456, 0x41A1,{ 0xBC, 0x57, 0x8D,0x14, 0xA6, 0x39,0xFF, 0xA6} };
extern "C" const __declspec(selectany) GUID IID_IFocuser = {0x1671E3FC, 0xC0C0, 0x44FB,{ 0xA7, 0x9C, 0x9D,0xF0, 0xA4, 0xE4,0xEB, 0x2D} };
extern "C" const __declspec(selectany) GUID CLSID_Focuser = {0x936E0CDD, 0xF317, 0x4759,{ 0x90, 0x2A, 0x5A,0x6A, 0xFE, 0x01,0xFF, 0x74} };
extern "C" const __declspec(selectany) GUID IID_ICCD1 = {0x66B2796B, 0x5575, 0x43DA,{ 0x91, 0x99, 0x22,0x6B, 0x1D, 0xE9,0xD0, 0x06} };
extern "C" const __declspec(selectany) GUID CLSID_CCD1 = {0xFFE394F9, 0xC03C, 0x4B70,{ 0x96, 0x2D, 0xAF,0x8A, 0xD5, 0xAE,0x06, 0xCF} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{A5A73D7E-9916-4F9F-AF63-C2748F9B7CD5}") IcRocPcServidor;
typedef TComInterface<IcRocPcServidor, &IID_IcRocPcServidor> IcRocPcServidorPtr;

interface DECLSPEC_UUID("{1671E3FC-C0C0-44FB-A79C-9DF0A4E4EB2D}") IFocuser;
typedef TComInterface<IFocuser, &IID_IFocuser> IFocuserPtr;

interface DECLSPEC_UUID("{66B2796B-5575-43DA-9199-226B1DE9D006}") ICCD1;
typedef TComInterface<ICCD1, &IID_ICCD1> ICCD1Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IcRocPcServidor cRocPcServidor;
typedef IcRocPcServidorPtr cRocPcServidorPtr;
typedef IFocuser Focuser;
typedef IFocuserPtr FocuserPtr;
typedef ICCD1 CCD1;
typedef ICCD1Ptr CCD1Ptr;

#define LIBID_OF_cRocPcServidor (&LIBID_RocPcServidor)
#define LIBID_OF_Focuser (&LIBID_RocPcServidor)
#define LIBID_OF_CCD1 (&LIBID_RocPcServidor)
// *********************************************************************//
// Interface: IcRocPcServidor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A5A73D7E-9916-4F9F-AF63-C2748F9B7CD5}
// *********************************************************************//
interface IcRocPcServidor  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE OnStartPage(LPUNKNOWN AScriptingContext/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE OnEndPage(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Foto(BSTR nombre/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Slew(BSTR com/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Slewd(double Ra/*[in]*/, double De/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE GetRaDe(double* Ra/*[out]*/, double* De/*[out]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Ra(double* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Dec(double* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Tambiente(double* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_pTccd(double* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_humedadR(double* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Nubes(long* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_EstadoCor(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_MensEMAv2(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_FocusAbsolute(long* Value/*[out,retval]*/) = 0; // [17]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_Ra(void)
  {
    double Value;
    OLECHECK(this->get_Ra((double*)&Value));
    return Value;
  }

  double __fastcall get_Dec(void)
  {
    double Value;
    OLECHECK(this->get_Dec((double*)&Value));
    return Value;
  }

  double __fastcall get_Tambiente(void)
  {
    double Value;
    OLECHECK(this->get_Tambiente((double*)&Value));
    return Value;
  }

  double __fastcall get_pTccd(void)
  {
    double Value;
    OLECHECK(this->get_pTccd((double*)&Value));
    return Value;
  }

  double __fastcall get_humedadR(void)
  {
    double Value;
    OLECHECK(this->get_humedadR((double*)&Value));
    return Value;
  }

  long __fastcall get_Nubes(void)
  {
    long Value;
    OLECHECK(this->get_Nubes((long*)&Value));
    return Value;
  }

  long __fastcall get_EstadoCor(void)
  {
    long Value;
    OLECHECK(this->get_EstadoCor((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_MensEMAv2(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_MensEMAv2((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_FocusAbsolute(void)
  {
    long Value;
    OLECHECK(this->get_FocusAbsolute((long*)&Value));
    return Value;
  }


  __property   double          Ra = {read = get_Ra};
  __property   double          Dec = {read = get_Dec};
  __property   double          Tambiente = {read = get_Tambiente};
  __property   double          pTccd = {read = get_pTccd};
  __property   double          humedadR = {read = get_humedadR};
  __property   long            Nubes = {read = get_Nubes};
  __property   long            EstadoCor = {read = get_EstadoCor};
  __property   BSTR            MensEMAv2 = {read = get_MensEMAv2};
  __property   long            FocusAbsolute = {read = get_FocusAbsolute};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFocuser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1671E3FC-C0C0-44FB-A79C-9DF0A4E4EB2D}
// *********************************************************************//
interface IFocuser  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Position(double* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Move(double destino/*[in]*/) = 0; // [2]
  // [3] Enfocador con contador absoluto.
  virtual HRESULT STDMETHODCALLTYPE get_Absolute(double* absoluto/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_IsMoving(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_MaxIncrement(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_MaxStep(long* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_StepSize(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE Halt(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Temperature(long* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_TempCompAvailable(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_TempComp(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_TempComp(VARIANT_BOOL Value/*[in]*/) = 0; // [12]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_Position(void)
  {
    double Value;
    OLECHECK(this->get_Position((double*)&Value));
    return Value;
  }

  double __fastcall get_Absolute(void)
  {
    double absoluto;
    OLECHECK(this->get_Absolute((double*)&absoluto));
    return absoluto;
  }

  VARIANT_BOOL __fastcall get_IsMoving(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_IsMoving((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_MaxIncrement(void)
  {
    long Value;
    OLECHECK(this->get_MaxIncrement((long*)&Value));
    return Value;
  }

  long __fastcall get_MaxStep(void)
  {
    long Value;
    OLECHECK(this->get_MaxStep((long*)&Value));
    return Value;
  }

  long __fastcall get_StepSize(void)
  {
    long Value;
    OLECHECK(this->get_StepSize((long*)&Value));
    return Value;
  }

  long __fastcall get_Temperature(void)
  {
    long Value;
    OLECHECK(this->get_Temperature((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_TempCompAvailable(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_TempCompAvailable((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_TempComp(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_TempComp((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   double          Position = {read = get_Position};
  __property   double          Absolute = {read = get_Absolute};
  __property   VARIANT_BOOL    IsMoving = {read = get_IsMoving};
  __property   long            MaxIncrement = {read = get_MaxIncrement};
  __property   long            MaxStep = {read = get_MaxStep};
  __property   long            StepSize = {read = get_StepSize};
  __property   long            Temperature = {read = get_Temperature};
  __property   VARIANT_BOOL    TempCompAvailable = {read = get_TempCompAvailable};
  __property   VARIANT_BOOL    TempComp = {read = get_TempComp, write = set_TempComp};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICCD1
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66B2796B-5575-43DA-9199-226B1DE9D006}
// *********************************************************************//
interface ICCD1  : public IDispatch
{
public:
  // [1] Inicia adquisicion.
  virtual HRESULT STDMETHODCALLTYPE Foto(void) = 0;
  // [2] Numero de fotos a realizar
  virtual HRESULT STDMETHODCALLTYPE NumFotos(double Numero/*[in]*/) = 0;
  // [4] Evolucion de la foto, valor de la barrra de progreso.
  virtual HRESULT STDMETHODCALLTYPE get_Estado(double* Value/*[out,retval]*/) = 0;
  // [5] Foto en curso.
  virtual HRESULT STDMETHODCALLTYPE get_FotoActual(double* Value/*[out,retval]*/) = 0;
  // [6] Exposicion en sg.
  virtual HRESULT STDMETHODCALLTYPE Exposicion(double Exposg/*[in]*/) = 0;
  // [7] Bining de la foto.
  virtual HRESULT STDMETHODCALLTYPE Binin(double Binin/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE TipoFoto(double tipo/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE nombre(BSTR nombre/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_LinkEnabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_LinkEnabled(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE _set_LinkEnabled(VARIANT_BOOL* Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_DisableAutoShutdown(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DisableAutoShutdown(VARIANT_BOOL Value/*[in]*/) = 0; // [10]
  // [11] Empieza una exposicion, usar ImageReady para ver cuando termina.
  virtual HRESULT STDMETHODCALLTYPE Expose(double Duration/*[in]*/, int Light/*[in]*/, 
                                           int Filter/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE SetFullFrame(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_BinX(short Param1/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_BinY(short Param1/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_ImageReady(int* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE SaveImage(BSTR path/*[in]*/) = 0; // [16]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_Estado(void)
  {
    double Value;
    OLECHECK(this->get_Estado((double*)&Value));
    return Value;
  }

  double __fastcall get_FotoActual(void)
  {
    double Value;
    OLECHECK(this->get_FotoActual((double*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_LinkEnabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_LinkEnabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DisableAutoShutdown(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DisableAutoShutdown((VARIANT_BOOL*)&Value));
    return Value;
  }

  int __fastcall get_ImageReady(void)
  {
    int Value;
    OLECHECK(this->get_ImageReady((int*)&Value));
    return Value;
  }


  __property   double          Estado = {read = get_Estado};
  __property   double          FotoActual = {read = get_FotoActual};
  __property   VARIANT_BOOL    LinkEnabled = {read = get_LinkEnabled, write = set_LinkEnabled};
  __property   VARIANT_BOOL    DisableAutoShutdown = {read = get_DisableAutoShutdown, write = set_DisableAutoShutdown};
  __property   short           BinX = {write = set_BinX};
  __property   short           BinY = {write = set_BinY};
  __property   int             ImageReady = {read = get_ImageReady};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIcRocPcServidor
// Interface: IcRocPcServidor
// *********************************************************************//
template <class T /* IcRocPcServidor */ >
class TCOMIcRocPcServidorT : public TComInterface<IcRocPcServidor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIcRocPcServidorT() {}
  TCOMIcRocPcServidorT(IcRocPcServidor *intf, bool addRef = false) : TComInterface<IcRocPcServidor>(intf, addRef) {}
  TCOMIcRocPcServidorT(const TCOMIcRocPcServidorT& src) : TComInterface<IcRocPcServidor>(src) {}
  TCOMIcRocPcServidorT& operator=(const TCOMIcRocPcServidorT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall OnStartPage(LPUNKNOWN AScriptingContext/*[in]*/);
  HRESULT         __fastcall OnEndPage(void);
  HRESULT         __fastcall Foto(BSTR nombre/*[in]*/);
  HRESULT         __fastcall Slew(BSTR com/*[in]*/);
  HRESULT         __fastcall Slewd(double Ra/*[in]*/, double De/*[in]*/);
  HRESULT         __fastcall GetRaDe(double* Ra/*[out]*/, double* De/*[out]*/);
  HRESULT         __fastcall get_Ra(double* Value/*[out,retval]*/);
  double          __fastcall get_Ra(void);
  HRESULT         __fastcall get_Dec(double* Value/*[out,retval]*/);
  double          __fastcall get_Dec(void);
  HRESULT         __fastcall get_Tambiente(double* Value/*[out,retval]*/);
  double          __fastcall get_Tambiente(void);
  HRESULT         __fastcall get_pTccd(double* Value/*[out,retval]*/);
  double          __fastcall get_pTccd(void);
  HRESULT         __fastcall get_humedadR(double* Value/*[out,retval]*/);
  double          __fastcall get_humedadR(void);
  HRESULT         __fastcall get_Nubes(long* Value/*[out,retval]*/);
  long            __fastcall get_Nubes(void);
  HRESULT         __fastcall get_EstadoCor(long* Value/*[out,retval]*/);
  long            __fastcall get_EstadoCor(void);
  HRESULT         __fastcall get_MensEMAv2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MensEMAv2(void);
  HRESULT         __fastcall get_FocusAbsolute(long* Value/*[out,retval]*/);
  long            __fastcall get_FocusAbsolute(void);

  __property   double          Ra = {read = get_Ra};
  __property   double          Dec = {read = get_Dec};
  __property   double          Tambiente = {read = get_Tambiente};
  __property   double          pTccd = {read = get_pTccd};
  __property   double          humedadR = {read = get_humedadR};
  __property   long            Nubes = {read = get_Nubes};
  __property   long            EstadoCor = {read = get_EstadoCor};
  __property   BSTR            MensEMAv2 = {read = get_MensEMAv2};
  __property   long            FocusAbsolute = {read = get_FocusAbsolute};
};
typedef TCOMIcRocPcServidorT<IcRocPcServidor> TCOMIcRocPcServidor;

// *********************************************************************//
// DispIntf:  IcRocPcServidor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A5A73D7E-9916-4F9F-AF63-C2748F9B7CD5}
// *********************************************************************//
template<class T>
class IcRocPcServidorDispT : public TAutoDriver<IcRocPcServidor>
{
public:
  IcRocPcServidorDispT(){}

  IcRocPcServidorDispT(IcRocPcServidor *pintf)
  {
    TAutoDriver<IcRocPcServidor>::Bind(pintf, false);
  }

  IcRocPcServidorDispT(IcRocPcServidorPtr pintf)
  {
    TAutoDriver<IcRocPcServidor>::Bind(pintf, true);
  }

  IcRocPcServidorDispT& operator=(IcRocPcServidor *pintf)
  {
    TAutoDriver<IcRocPcServidor>::Bind(pintf, false);
    return *this;
  }

  IcRocPcServidorDispT& operator=(IcRocPcServidorPtr pintf)
  {
    TAutoDriver<IcRocPcServidor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_cRocPcServidor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_cRocPcServidor);
  }

  HRESULT         __fastcall OnStartPage(LPUNKNOWN AScriptingContext/*[in]*/);
  HRESULT         __fastcall OnEndPage();
  HRESULT         __fastcall Foto(BSTR nombre/*[in]*/);
  HRESULT         __fastcall Slew(BSTR com/*[in]*/);
  HRESULT         __fastcall Slewd(double Ra/*[in]*/, double De/*[in]*/);
  HRESULT         __fastcall GetRaDe(double* Ra/*[out]*/, double* De/*[out]*/);
  HRESULT         __fastcall get_Ra(double* Value/*[out,retval]*/);
  double          __fastcall get_Ra(void);
  HRESULT         __fastcall get_Dec(double* Value/*[out,retval]*/);
  double          __fastcall get_Dec(void);
  HRESULT         __fastcall get_Tambiente(double* Value/*[out,retval]*/);
  double          __fastcall get_Tambiente(void);
  HRESULT         __fastcall get_pTccd(double* Value/*[out,retval]*/);
  double          __fastcall get_pTccd(void);
  HRESULT         __fastcall get_humedadR(double* Value/*[out,retval]*/);
  double          __fastcall get_humedadR(void);
  HRESULT         __fastcall get_Nubes(long* Value/*[out,retval]*/);
  long            __fastcall get_Nubes(void);
  HRESULT         __fastcall get_EstadoCor(long* Value/*[out,retval]*/);
  long            __fastcall get_EstadoCor(void);
  HRESULT         __fastcall get_MensEMAv2(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_MensEMAv2(void);
  HRESULT         __fastcall get_FocusAbsolute(long* Value/*[out,retval]*/);
  long            __fastcall get_FocusAbsolute(void);

  __property   double          Ra = {read = get_Ra};
  __property   double          Dec = {read = get_Dec};
  __property   double          Tambiente = {read = get_Tambiente};
  __property   double          pTccd = {read = get_pTccd};
  __property   double          humedadR = {read = get_humedadR};
  __property   long            Nubes = {read = get_Nubes};
  __property   long            EstadoCor = {read = get_EstadoCor};
  __property   BSTR            MensEMAv2 = {read = get_MensEMAv2};
  __property   long            FocusAbsolute = {read = get_FocusAbsolute};
};
typedef IcRocPcServidorDispT<IcRocPcServidor> IcRocPcServidorDisp;

// *********************************************************************//
// SmartIntf: TCOMIFocuser
// Interface: IFocuser
// *********************************************************************//
template <class T /* IFocuser */ >
class TCOMIFocuserT : public TComInterface<IFocuser>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFocuserT() {}
  TCOMIFocuserT(IFocuser *intf, bool addRef = false) : TComInterface<IFocuser>(intf, addRef) {}
  TCOMIFocuserT(const TCOMIFocuserT& src) : TComInterface<IFocuser>(src) {}
  TCOMIFocuserT& operator=(const TCOMIFocuserT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Position(double* Value/*[out,retval]*/);
  double          __fastcall get_Position(void);
  HRESULT         __fastcall Move(double destino/*[in]*/);
  HRESULT         __fastcall get_Absolute(double* absoluto/*[out,retval]*/);
  double          __fastcall get_Absolute(void);
  HRESULT         __fastcall get_IsMoving(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_IsMoving(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsMoving(void);
  HRESULT         __fastcall get_MaxIncrement(long* Value/*[out,retval]*/);
  long            __fastcall get_MaxIncrement(void);
  HRESULT         __fastcall get_MaxStep(long* Value/*[out,retval]*/);
  long            __fastcall get_MaxStep(void);
  HRESULT         __fastcall get_StepSize(long* Value/*[out,retval]*/);
  long            __fastcall get_StepSize(void);
  HRESULT         __fastcall Halt(void);
  HRESULT         __fastcall get_Temperature(long* Value/*[out,retval]*/);
  long            __fastcall get_Temperature(void);
  HRESULT         __fastcall get_TempCompAvailable(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_TempCompAvailable(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TempCompAvailable(void);
  HRESULT         __fastcall get_TempComp(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_TempComp(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TempComp(void);
  HRESULT         __fastcall set_TempComp(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_TempComp(TOLEBOOL Value/*[in]*/);

  __property   double          Position = {read = get_Position};
  __property   double          Absolute = {read = get_Absolute};
  __property   TOLEBOOL        IsMoving = {read = get_IsMoving};
  __property   long            MaxIncrement = {read = get_MaxIncrement};
  __property   long            MaxStep = {read = get_MaxStep};
  __property   long            StepSize = {read = get_StepSize};
  __property   long            Temperature = {read = get_Temperature};
  __property   TOLEBOOL        TempCompAvailable = {read = get_TempCompAvailable};
  __property   TOLEBOOL        TempComp = {read = get_TempComp, write = set_TempComp};
};
typedef TCOMIFocuserT<IFocuser> TCOMIFocuser;

// *********************************************************************//
// DispIntf:  IFocuser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1671E3FC-C0C0-44FB-A79C-9DF0A4E4EB2D}
// *********************************************************************//
template<class T>
class IFocuserDispT : public TAutoDriver<IFocuser>
{
public:
  IFocuserDispT(){}

  IFocuserDispT(IFocuser *pintf)
  {
    TAutoDriver<IFocuser>::Bind(pintf, false);
  }

  IFocuserDispT(IFocuserPtr pintf)
  {
    TAutoDriver<IFocuser>::Bind(pintf, true);
  }

  IFocuserDispT& operator=(IFocuser *pintf)
  {
    TAutoDriver<IFocuser>::Bind(pintf, false);
    return *this;
  }

  IFocuserDispT& operator=(IFocuserPtr pintf)
  {
    TAutoDriver<IFocuser>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Focuser));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Focuser);
  }

  HRESULT         __fastcall get_Position(double* Value/*[out,retval]*/);
  double          __fastcall get_Position(void);
  HRESULT         __fastcall Move(double destino/*[in]*/);
  HRESULT         __fastcall get_Absolute(double* absoluto/*[out,retval]*/);
  double          __fastcall get_Absolute(void);
  HRESULT         __fastcall get_IsMoving(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsMoving(void);
  HRESULT         __fastcall get_MaxIncrement(long* Value/*[out,retval]*/);
  long            __fastcall get_MaxIncrement(void);
  HRESULT         __fastcall get_MaxStep(long* Value/*[out,retval]*/);
  long            __fastcall get_MaxStep(void);
  HRESULT         __fastcall get_StepSize(long* Value/*[out,retval]*/);
  long            __fastcall get_StepSize(void);
  HRESULT         __fastcall Halt();
  HRESULT         __fastcall get_Temperature(long* Value/*[out,retval]*/);
  long            __fastcall get_Temperature(void);
  HRESULT         __fastcall get_TempCompAvailable(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TempCompAvailable(void);
  HRESULT         __fastcall get_TempComp(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TempComp(void);
  HRESULT         __fastcall set_TempComp(VARIANT_BOOL Value/*[in]*/);

  __property   double          Position = {read = get_Position};
  __property   double          Absolute = {read = get_Absolute};
  __property   VARIANT_BOOL    IsMoving = {read = get_IsMoving};
  __property   long            MaxIncrement = {read = get_MaxIncrement};
  __property   long            MaxStep = {read = get_MaxStep};
  __property   long            StepSize = {read = get_StepSize};
  __property   long            Temperature = {read = get_Temperature};
  __property   VARIANT_BOOL    TempCompAvailable = {read = get_TempCompAvailable};
  __property   VARIANT_BOOL    TempComp = {read = get_TempComp, write = set_TempComp};
};
typedef IFocuserDispT<IFocuser> IFocuserDisp;

// *********************************************************************//
// SmartIntf: TCOMICCD1
// Interface: ICCD1
// *********************************************************************//
template <class T /* ICCD1 */ >
class TCOMICCD1T : public TComInterface<ICCD1>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICCD1T() {}
  TCOMICCD1T(ICCD1 *intf, bool addRef = false) : TComInterface<ICCD1>(intf, addRef) {}
  TCOMICCD1T(const TCOMICCD1T& src) : TComInterface<ICCD1>(src) {}
  TCOMICCD1T& operator=(const TCOMICCD1T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Foto(void);
  HRESULT         __fastcall NumFotos(double Numero/*[in]*/);
  HRESULT         __fastcall get_Estado(double* Value/*[out,retval]*/);
  double          __fastcall get_Estado(void);
  HRESULT         __fastcall get_FotoActual(double* Value/*[out,retval]*/);
  double          __fastcall get_FotoActual(void);
  HRESULT         __fastcall Exposicion(double Exposg/*[in]*/);
  HRESULT         __fastcall Binin(double Binin/*[in]*/);
  HRESULT         __fastcall TipoFoto(double tipo/*[in]*/);
  HRESULT         __fastcall nombre(BSTR nombre/*[in]*/);
  HRESULT         __fastcall get_LinkEnabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_LinkEnabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LinkEnabled(void);
  HRESULT         __fastcall set_LinkEnabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_LinkEnabled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall _set_LinkEnabled(VARIANT_BOOL* Value/*[in]*/);
  HRESULT         __fastcall _set_LinkEnabled(TOLEBOOL* Value/*[in]*/);
  HRESULT         __fastcall get_DisableAutoShutdown(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DisableAutoShutdown(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisableAutoShutdown(void);
  HRESULT         __fastcall set_DisableAutoShutdown(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DisableAutoShutdown(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall Expose(double Duration/*[in]*/, int Light/*[in]*/, int Filter/*[in]*/);
  HRESULT         __fastcall SetFullFrame(void);
  HRESULT         __fastcall set_BinX(short Param1/*[in]*/);
  HRESULT         __fastcall set_BinY(short Param1/*[in]*/);
  HRESULT         __fastcall get_ImageReady(int* Value/*[out,retval]*/);
  int             __fastcall get_ImageReady(void);
  HRESULT         __fastcall SaveImage(BSTR path/*[in]*/);

  __property   double          Estado = {read = get_Estado};
  __property   double          FotoActual = {read = get_FotoActual};
  __property   TOLEBOOL        LinkEnabled = {read = get_LinkEnabled, write = set_LinkEnabled};
  __property   TOLEBOOL        DisableAutoShutdown = {read = get_DisableAutoShutdown, write = set_DisableAutoShutdown};
  __property   short           BinX = {write = set_BinX};
  __property   short           BinY = {write = set_BinY};
  __property   int             ImageReady = {read = get_ImageReady};
};
typedef TCOMICCD1T<ICCD1> TCOMICCD1;

// *********************************************************************//
// DispIntf:  ICCD1
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66B2796B-5575-43DA-9199-226B1DE9D006}
// *********************************************************************//
template<class T>
class ICCD1DispT : public TAutoDriver<ICCD1>
{
public:
  ICCD1DispT(){}

  ICCD1DispT(ICCD1 *pintf)
  {
    TAutoDriver<ICCD1>::Bind(pintf, false);
  }

  ICCD1DispT(ICCD1Ptr pintf)
  {
    TAutoDriver<ICCD1>::Bind(pintf, true);
  }

  ICCD1DispT& operator=(ICCD1 *pintf)
  {
    TAutoDriver<ICCD1>::Bind(pintf, false);
    return *this;
  }

  ICCD1DispT& operator=(ICCD1Ptr pintf)
  {
    TAutoDriver<ICCD1>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CCD1));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CCD1);
  }

  HRESULT         __fastcall Foto();
  HRESULT         __fastcall NumFotos(double Numero/*[in]*/);
  HRESULT         __fastcall get_Estado(double* Value/*[out,retval]*/);
  double          __fastcall get_Estado(void);
  HRESULT         __fastcall get_FotoActual(double* Value/*[out,retval]*/);
  double          __fastcall get_FotoActual(void);
  HRESULT         __fastcall Exposicion(double Exposg/*[in]*/);
  HRESULT         __fastcall Binin(double Binin/*[in]*/);
  HRESULT         __fastcall TipoFoto(double tipo/*[in]*/);
  HRESULT         __fastcall nombre(BSTR nombre/*[in]*/);
  HRESULT         __fastcall get_LinkEnabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LinkEnabled(void);
  HRESULT         __fastcall set_LinkEnabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall _set_LinkEnabled(VARIANT_BOOL* Value/*[in]*/);
  HRESULT         __fastcall get_DisableAutoShutdown(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisableAutoShutdown(void);
  HRESULT         __fastcall set_DisableAutoShutdown(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall Expose(double Duration/*[in]*/, int Light/*[in]*/, int Filter/*[in]*/);
  HRESULT         __fastcall SetFullFrame();
  HRESULT         __fastcall set_BinX(short Param1/*[in]*/);
  HRESULT         __fastcall set_BinY(short Param1/*[in]*/);
  HRESULT         __fastcall get_ImageReady(int* Value/*[out,retval]*/);
  int             __fastcall get_ImageReady(void);
  HRESULT         __fastcall SaveImage(BSTR path/*[in]*/);

  __property   double          Estado = {read = get_Estado};
  __property   double          FotoActual = {read = get_FotoActual};
  __property   VARIANT_BOOL    LinkEnabled = {read = get_LinkEnabled, write = set_LinkEnabled};
  __property   VARIANT_BOOL    DisableAutoShutdown = {read = get_DisableAutoShutdown, write = set_DisableAutoShutdown};
  __property   short           BinX = {write = set_BinX};
  __property   short           BinY = {write = set_BinY};
  __property   int             ImageReady = {read = get_ImageReady};
};
typedef ICCD1DispT<ICCD1> ICCD1Disp;

// *********************************************************************//
// SmartIntf: TCOMIcRocPcServidor
// Interface: IcRocPcServidor
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::OnStartPage(LPUNKNOWN AScriptingContext/*[in]*/)
{
  return (*this)->OnStartPage(AScriptingContext);
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::OnEndPage(void)
{
  return (*this)->OnEndPage();
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::Foto(BSTR nombre/*[in]*/)
{
  return (*this)->Foto(nombre);
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::Slew(BSTR com/*[in]*/)
{
  return (*this)->Slew(com);
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::Slewd(double Ra/*[in]*/, double De/*[in]*/)
{
  return (*this)->Slewd(Ra, De);
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::GetRaDe(double* Ra/*[out]*/, double* De/*[out]*/)
{
  return (*this)->GetRaDe(Ra, De);
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_Ra(double* Value/*[out,retval]*/)
{
  return (*this)->get_Ra(Value);
}

template <class T> double __fastcall
TCOMIcRocPcServidorT<T>::get_Ra(void)
{
  double Value;
  OLECHECK(this->get_Ra((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_Dec(double* Value/*[out,retval]*/)
{
  return (*this)->get_Dec(Value);
}

template <class T> double __fastcall
TCOMIcRocPcServidorT<T>::get_Dec(void)
{
  double Value;
  OLECHECK(this->get_Dec((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_Tambiente(double* Value/*[out,retval]*/)
{
  return (*this)->get_Tambiente(Value);
}

template <class T> double __fastcall
TCOMIcRocPcServidorT<T>::get_Tambiente(void)
{
  double Value;
  OLECHECK(this->get_Tambiente((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_pTccd(double* Value/*[out,retval]*/)
{
  return (*this)->get_pTccd(Value);
}

template <class T> double __fastcall
TCOMIcRocPcServidorT<T>::get_pTccd(void)
{
  double Value;
  OLECHECK(this->get_pTccd((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_humedadR(double* Value/*[out,retval]*/)
{
  return (*this)->get_humedadR(Value);
}

template <class T> double __fastcall
TCOMIcRocPcServidorT<T>::get_humedadR(void)
{
  double Value;
  OLECHECK(this->get_humedadR((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_Nubes(long* Value/*[out,retval]*/)
{
  return (*this)->get_Nubes(Value);
}

template <class T> long __fastcall
TCOMIcRocPcServidorT<T>::get_Nubes(void)
{
  long Value;
  OLECHECK(this->get_Nubes((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_EstadoCor(long* Value/*[out,retval]*/)
{
  return (*this)->get_EstadoCor(Value);
}

template <class T> long __fastcall
TCOMIcRocPcServidorT<T>::get_EstadoCor(void)
{
  long Value;
  OLECHECK(this->get_EstadoCor((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_MensEMAv2(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_MensEMAv2(Value);
}

template <class T> BSTR __fastcall
TCOMIcRocPcServidorT<T>::get_MensEMAv2(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_MensEMAv2((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIcRocPcServidorT<T>::get_FocusAbsolute(long* Value/*[out,retval]*/)
{
  return (*this)->get_FocusAbsolute(Value);
}

template <class T> long __fastcall
TCOMIcRocPcServidorT<T>::get_FocusAbsolute(void)
{
  long Value;
  OLECHECK(this->get_FocusAbsolute((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IcRocPcServidor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A5A73D7E-9916-4F9F-AF63-C2748F9B7CD5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::OnStartPage(LPUNKNOWN AScriptingContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnStartPage"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = AScriptingContext /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::OnEndPage()
{
  _TDispID _dispid(*this, OLETEXT("OnEndPage"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::Foto(BSTR nombre/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Foto"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = nombre /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::Slew(BSTR com/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slew"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = com /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::Slewd(double Ra/*[in]*/, double De/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Slewd"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = Ra /*[VT_R8:0]*/;
  _args[2] = De /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::GetRaDe(double* Ra/*[out]*/, double* De/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRaDe"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = Ra /*[VT_R8:1]*/;
  _args[2] = De /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_Ra(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ra"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IcRocPcServidorDispT<T>::get_Ra(void)
{
  double Value;
  this->get_Ra((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_Dec(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dec"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IcRocPcServidorDispT<T>::get_Dec(void)
{
  double Value;
  this->get_Dec((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_Tambiente(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tambiente"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IcRocPcServidorDispT<T>::get_Tambiente(void)
{
  double Value;
  this->get_Tambiente((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_pTccd(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("pTccd"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IcRocPcServidorDispT<T>::get_pTccd(void)
{
  double Value;
  this->get_pTccd((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_humedadR(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("humedadR"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IcRocPcServidorDispT<T>::get_humedadR(void)
{
  double Value;
  this->get_humedadR((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_Nubes(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nubes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IcRocPcServidorDispT<T>::get_Nubes(void)
{
  long Value;
  this->get_Nubes((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_EstadoCor(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EstadoCor"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IcRocPcServidorDispT<T>::get_EstadoCor(void)
{
  long Value;
  this->get_EstadoCor((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_MensEMAv2(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MensEMAv2"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IcRocPcServidorDispT<T>::get_MensEMAv2(void)
{
  BSTR Value;
  this->get_MensEMAv2((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IcRocPcServidorDispT<T>::get_FocusAbsolute(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FocusAbsolute"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IcRocPcServidorDispT<T>::get_FocusAbsolute(void)
{
  long Value;
  this->get_FocusAbsolute((long*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIFocuser
// Interface: IFocuser
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_Position(double* Value/*[out,retval]*/)
{
  return (*this)->get_Position(Value);
}

template <class T> double __fastcall
TCOMIFocuserT<T>::get_Position(void)
{
  double Value;
  OLECHECK(this->get_Position((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::Move(double destino/*[in]*/)
{
  return (*this)->Move(destino);
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_Absolute(double* absoluto/*[out,retval]*/)
{
  return (*this)->get_Absolute(absoluto);
}

template <class T> double __fastcall
TCOMIFocuserT<T>::get_Absolute(void)
{
  double absoluto;
  OLECHECK(this->get_Absolute((double*)&absoluto));
  return absoluto;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_IsMoving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_IsMoving(Value);
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_IsMoving(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_IsMoving(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIFocuserT<T>::get_IsMoving(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_IsMoving((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_MaxIncrement(long* Value/*[out,retval]*/)
{
  return (*this)->get_MaxIncrement(Value);
}

template <class T> long __fastcall
TCOMIFocuserT<T>::get_MaxIncrement(void)
{
  long Value;
  OLECHECK(this->get_MaxIncrement((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_MaxStep(long* Value/*[out,retval]*/)
{
  return (*this)->get_MaxStep(Value);
}

template <class T> long __fastcall
TCOMIFocuserT<T>::get_MaxStep(void)
{
  long Value;
  OLECHECK(this->get_MaxStep((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_StepSize(long* Value/*[out,retval]*/)
{
  return (*this)->get_StepSize(Value);
}

template <class T> long __fastcall
TCOMIFocuserT<T>::get_StepSize(void)
{
  long Value;
  OLECHECK(this->get_StepSize((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::Halt(void)
{
  return (*this)->Halt();
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_Temperature(long* Value/*[out,retval]*/)
{
  return (*this)->get_Temperature(Value);
}

template <class T> long __fastcall
TCOMIFocuserT<T>::get_Temperature(void)
{
  long Value;
  OLECHECK(this->get_Temperature((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_TempCompAvailable(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TempCompAvailable(Value);
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_TempCompAvailable(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TempCompAvailable(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIFocuserT<T>::get_TempCompAvailable(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_TempCompAvailable((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_TempComp(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TempComp(Value);
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::get_TempComp(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TempComp(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIFocuserT<T>::get_TempComp(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_TempComp((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::set_TempComp(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_TempComp(Value);
}

template <class T> HRESULT __fastcall
TCOMIFocuserT<T>::set_TempComp(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_TempComp(VARIANT_BOOL)Value);
}

// *********************************************************************//
// DispIntf:  IFocuser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1671E3FC-C0C0-44FB-A79C-9DF0A4E4EB2D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_Position(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFocuserDispT<T>::get_Position(void)
{
  double Value;
  this->get_Position((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::Move(double destino/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = destino /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_Absolute(double* absoluto/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Absolute"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(absoluto /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFocuserDispT<T>::get_Absolute(void)
{
  double absoluto;
  this->get_Absolute((double*)&absoluto);
  return absoluto;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_IsMoving(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsMoving"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFocuserDispT<T>::get_IsMoving(void)
{
  VARIANT_BOOL Value;
  this->get_IsMoving((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_MaxIncrement(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxIncrement"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFocuserDispT<T>::get_MaxIncrement(void)
{
  long Value;
  this->get_MaxIncrement((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_MaxStep(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxStep"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFocuserDispT<T>::get_MaxStep(void)
{
  long Value;
  this->get_MaxStep((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_StepSize(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StepSize"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFocuserDispT<T>::get_StepSize(void)
{
  long Value;
  this->get_StepSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::Halt()
{
  _TDispID _dispid(*this, OLETEXT("Halt"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_Temperature(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Temperature"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFocuserDispT<T>::get_Temperature(void)
{
  long Value;
  this->get_Temperature((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_TempCompAvailable(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TempCompAvailable"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFocuserDispT<T>::get_TempCompAvailable(void)
{
  VARIANT_BOOL Value;
  this->get_TempCompAvailable((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::get_TempComp(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TempComp"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFocuserDispT<T>::get_TempComp(void)
{
  VARIANT_BOOL Value;
  this->get_TempComp((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFocuserDispT<T>::set_TempComp(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TempComp"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMICCD1
// Interface: ICCD1
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICCD1T<T>::Foto(void)
{
  return (*this)->Foto();
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::NumFotos(double Numero/*[in]*/)
{
  return (*this)->NumFotos(Numero);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_Estado(double* Value/*[out,retval]*/)
{
  return (*this)->get_Estado(Value);
}

template <class T> double __fastcall
TCOMICCD1T<T>::get_Estado(void)
{
  double Value;
  OLECHECK(this->get_Estado((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_FotoActual(double* Value/*[out,retval]*/)
{
  return (*this)->get_FotoActual(Value);
}

template <class T> double __fastcall
TCOMICCD1T<T>::get_FotoActual(void)
{
  double Value;
  OLECHECK(this->get_FotoActual((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::Exposicion(double Exposg/*[in]*/)
{
  return (*this)->Exposicion(Exposg);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::Binin(double Binin/*[in]*/)
{
  return (*this)->Binin(Binin);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::TipoFoto(double tipo/*[in]*/)
{
  return (*this)->TipoFoto(tipo);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::nombre(BSTR nombre/*[in]*/)
{
  return (*this)->nombre(nombre);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_LinkEnabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_LinkEnabled(Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_LinkEnabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_LinkEnabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMICCD1T<T>::get_LinkEnabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_LinkEnabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_LinkEnabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_LinkEnabled(Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_LinkEnabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_LinkEnabled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::_set_LinkEnabled(VARIANT_BOOL* Value/*[in]*/)
{
  return (*this)->_set_LinkEnabled(Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::_set_LinkEnabled(TOLEBOOL* Value/*[in]*/)
{
  return (*this)->_set_LinkEnabled(VARIANT_BOOL*)Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_DisableAutoShutdown(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DisableAutoShutdown(Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_DisableAutoShutdown(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DisableAutoShutdown(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMICCD1T<T>::get_DisableAutoShutdown(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DisableAutoShutdown((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_DisableAutoShutdown(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DisableAutoShutdown(Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_DisableAutoShutdown(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DisableAutoShutdown(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::Expose(double Duration/*[in]*/, int Light/*[in]*/, int Filter/*[in]*/)
{
  return (*this)->Expose(Duration, Light, Filter);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::SetFullFrame(void)
{
  return (*this)->SetFullFrame();
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_BinX(short Param1/*[in]*/)
{
  return (*this)->set_BinX(Param1);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::set_BinY(short Param1/*[in]*/)
{
  return (*this)->set_BinY(Param1);
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::get_ImageReady(int* Value/*[out,retval]*/)
{
  return (*this)->get_ImageReady(Value);
}

template <class T> int __fastcall
TCOMICCD1T<T>::get_ImageReady(void)
{
  int Value;
  OLECHECK(this->get_ImageReady((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCD1T<T>::SaveImage(BSTR path/*[in]*/)
{
  return (*this)->SaveImage(path);
}

// *********************************************************************//
// DispIntf:  ICCD1
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66B2796B-5575-43DA-9199-226B1DE9D006}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICCD1DispT<T>::Foto()
{
  _TDispID _dispid(*this, OLETEXT("Foto"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::NumFotos(double Numero/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumFotos"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Numero /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::get_Estado(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Estado"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICCD1DispT<T>::get_Estado(void)
{
  double Value;
  this->get_Estado((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::get_FotoActual(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FotoActual"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICCD1DispT<T>::get_FotoActual(void)
{
  double Value;
  this->get_FotoActual((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::Exposicion(double Exposg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Exposicion"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Exposg /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::Binin(double Binin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Binin"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Binin /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::TipoFoto(double tipo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipoFoto"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = tipo /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::nombre(BSTR nombre/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nombre"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = nombre /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::get_LinkEnabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkEnabled"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICCD1DispT<T>::get_LinkEnabled(void)
{
  VARIANT_BOOL Value;
  this->get_LinkEnabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::set_LinkEnabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkEnabled"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::_set_LinkEnabled(VARIANT_BOOL* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkEnabled"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::get_DisableAutoShutdown(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableAutoShutdown"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICCD1DispT<T>::get_DisableAutoShutdown(void)
{
  VARIANT_BOOL Value;
  this->get_DisableAutoShutdown((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::set_DisableAutoShutdown(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableAutoShutdown"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::Expose(double Duration/*[in]*/, int Light/*[in]*/, int Filter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expose"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = Duration /*[VT_R8:0]*/;
  _args[2] = Light /*[VT_INT:0]*/;
  _args[3] = Filter /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::SetFullFrame()
{
  _TDispID _dispid(*this, OLETEXT("SetFullFrame"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::set_BinX(short Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BinX"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::set_BinY(short Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BinY"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::get_ImageReady(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageReady"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ICCD1DispT<T>::get_ImageReady(void)
{
  int Value;
  this->get_ImageReady((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCD1DispT<T>::SaveImage(BSTR path/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveImage"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = path /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : cRocPcServidor
// Interface: TCOMIcRocPcServidor
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIcRocPcServidor, IcRocPcServidor, &CLSID_cRocPcServidor, &IID_IcRocPcServidor> CocRocPcServidor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Focuser
// Interface: TCOMIFocuser
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFocuser, IFocuser, &CLSID_Focuser, &IID_IFocuser> CoFocuser;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CCD1
// Interface: TCOMICCD1
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICCD1, ICCD1, &CLSID_CCD1, &IID_ICCD1> CoCCD1;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Rocpcservidor_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Rocpcservidor_tlb;
#endif

#pragma option pop

#endif // RocPcServidor_TLBH
