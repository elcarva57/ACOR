// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 06/02/2012 12:01:06 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\User\Ema\ema.exe (1)
// LIBID: {63E9DAE2-1FC2-41B0-80E7-98F3C9662865}
// LCID: 0
// Helpfile: 
// HelpString: ema Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   ema_OCXH
#define   ema_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "ema_TLB.h"
namespace Ema_tlb
{

// *********************************************************************//
// HelpString: ema Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWeather
// Help String      : Weather Object
// Default Interface: IWeather
// Def. Intf. Object: IWeatherPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TWeather : public Oleserver::TOleServer
{
  IWeatherPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWeather(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWeatherPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWeatherPtr intf);


  float __fastcall get_AmbientTemperature(void)
  {
    return GetDefaultInterface()->get_AmbientTemperature();
  }

  TOLEBOOL __fastcall get_Safe(void)
  {
    return GetDefaultInterface()->get_Safe();
  }

  float __fastcall get_Clouds(void)
  {
    return GetDefaultInterface()->get_Clouds();
  }

  long __fastcall get_SkyQuality(void)
  {
    return GetDefaultInterface()->get_SkyQuality();
  }

  TOLEBOOL __fastcall get_Precipitation(void)
  {
    return GetDefaultInterface()->get_Precipitation();
  }

  BSTR __fastcall get_Name(void)
  {
    return GetDefaultInterface()->get_Name();
  }

  BSTR __fastcall get_MensajeEma(void)
  {
    return GetDefaultInterface()->get_MensajeEma();
  }

  float __fastcall get_BarometricPressure(void)
  {
    return GetDefaultInterface()->get_BarometricPressure();
  }

  long __fastcall get_DewPoint(void)
  {
    return GetDefaultInterface()->get_DewPoint();
  }

  long __fastcall get_RelativeHumidity(void)
  {
    return GetDefaultInterface()->get_RelativeHumidity();
  }

  long __fastcall get_WindDirection(void)
  {
    return GetDefaultInterface()->get_WindDirection();
  }

  long __fastcall get_WindVelocity(void)
  {
    return GetDefaultInterface()->get_WindVelocity();
  }

  TOLEBOOL __fastcall get_Connected(void)
  {
    return GetDefaultInterface()->get_Connected();
  }

  void __fastcall set_Connected(VARIANT_BOOL Value/*[in]*/)
  {
    GetDefaultInterface()->set_Connected(Value/*[in]*/);
  }

  long __fastcall get_ShutterStatus(void)
  {
    return GetDefaultInterface()->get_ShutterStatus();
  }

  float __fastcall get_SkyMagnitude(void)
  {
    return GetDefaultInterface()->get_SkyMagnitude();
  }

  void __fastcall set_MensajeCor(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_MensajeCor(Param1/*[in]*/);
  }

  void __fastcall OpenShutter(void)
  {
    GetDefaultInterface()->OpenShutter();
  }

  void __fastcall CloseShutter(void)
  {
    GetDefaultInterface()->CloseShutter();
  }

  void __fastcall SetupDialog(void)
  {
    GetDefaultInterface()->SetupDialog();
  }

  __property float AmbientTemperature={ read=get_AmbientTemperature };
  __property TOLEBOOL Safe={ read=get_Safe };
  __property float Clouds={ read=get_Clouds };
  __property long SkyQuality={ read=get_SkyQuality };
  __property TOLEBOOL Precipitation={ read=get_Precipitation };
  __property BSTR Name={ read=get_Name };
  __property BSTR MensajeEma={ read=get_MensajeEma };
  __property float BarometricPressure={ read=get_BarometricPressure };
  __property long DewPoint={ read=get_DewPoint };
  __property long RelativeHumidity={ read=get_RelativeHumidity };
  __property long WindDirection={ read=get_WindDirection };
  __property long WindVelocity={ read=get_WindVelocity };
  __property long ShutterStatus={ read=get_ShutterStatus };
  __property float SkyMagnitude={ read=get_SkyMagnitude };
  __property BSTR MensajeCor={ };
  __property TOLEBOOL Connected={ read=get_Connected, stored=false };
};

};     // namespace Ema_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ema_tlb;
#endif

#pragma option pop

#endif // ema_OCXH
